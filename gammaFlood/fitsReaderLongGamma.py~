from astropy.io import fits
import matplotlib.pyplot as plt
import numpy as np
import pickle

events = np.array([[{'TIME': [], 'CHANNEL': [], 'GRADE': [], 'STIM': [], 'PH_COM': [], 'SOURCE': []} for i in range(32)] for j in range(32)])
#events = {'RAWX': [], 'RAWY': [], 'TIME': [], 'CHANNEL': [], 'GRADE': [], 'STIM': [], 'PH_COM': []}

'''
gainFile = fits.open('/Volumes/LaCie/CdTe/longGammaFlood/20170908_H100_long_gamma_Co57_-10_gain_offset.fits')
tempgain = np.reshape(gainFile[1].data.field('GAIN_GRADE0'), (32,32))
#print(np.reshape(gainFile[1].data.field('RAWX'), (32,32)))
tempoffset = np.reshape(gainFile[1].data.field('OFFSET_GRADE0'), (32,32))

gain = np.zeros((34, 34))
offset = np.zeros((34, 34))

gain[1:33, 1:33] = tempgain
offset[1:33, 1:33] = tempoffset

del gainFile
del tempoffset
del tempgain'''

file = fits.open('/disk/lif2/spike/detectorData/longGammaFlood/20170908_H100_long_gamma_Co57_-10.0V.fits', memmap=True)
data = file[1].data
START = 0
i = 0

# Skip the beginning
while data.field('TEMP')[i] < -50:
    i += 1
START = i

collist = [fits.Column(name='TIME', format='D'), fits.Column(name='CHANNEL', format='D'), fits.Column(name='GRADE', format='K'), fits.Column(name='STIM', format='K'), fits.Column(name='PH_COM', format='D'), fits.Column(name='SOURCE', format='5A')]

for k in range(32):
    for j in range(32):
        fits.BinTableHDU.from_columns(collist).writeto('/disk/lif2/spike/detectorData/longGammaFlood/pixelData/H100_long_gamma_Am241_Co57_-10_0V_x' + str(k) + '_y' + str(j) + '.fits')

files = np.array([[fits.open('/disk/lif2/spike/detectorData/longGammaFlood/pixelData/H100_long_gamma_Am241_Co57_-10_0V_x' + str(k) + '_y' + str(j) + '.fits', memmap=True, mode='update') for k in range(32)] for j in range(32)])

while i < len(data.field('PH')):
	temp = data.field('PH_COM')[i].reshape(3,3)
	if np.sum(temp) > 0:
		mask = (temp > 0).astype(int)
		channel = np.sum(np.multiply(mask, temp))
		if (not np.isnan(channel)):
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['TIME'].append(data.field('TIME')[i])
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['CHANNEL'].append(channel)
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['GRADE'].append(data.field('GRADE')[i])
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['STIM'].append(data.field('STIM')[i])
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['PH_COM'].append(temp)
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['SOURCE'].append('Co57')
                    files[data.field('RAWX')[i], data.field('RAWY')[i]].flush()

	i += 1

file = fits.open('/disk/lif2/spike/detectorData/longGammaFlood/20170913_H100_long_gamma_Am241_-10.0V.fits', memmap=True)
data = file[1].data
START = 0
i = 0

# Skip the beginning
while data.field('TEMP')[i] < -50:
    i += 1
START = i



while i < len(data.field('PH')):
	temp = data.field('PH_COM')[i].reshape(3,3)
	if np.sum(temp) > 0:
		mask = (temp > 0).astype(int)
		channel = np.sum(np.multiply(mask, temp))
		if (not np.isnan(channel)):
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['TIME'].append(data.field('TIME')[i])
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['CHANNEL'].append(channel)
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['GRADE'].append(data.field('GRADE')[i])
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['STIM'].append(data.field('STIM')[i])
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['PH_COM'].append(temp)
                    files[data.field('RAWX')[i], data.field('RAWY')[i]][1].data['SOURCE'].append('Am241')
                    files[data.field('RAWX')[i], data.field('RAWY')[i]].flush()

	i += 1

print('Done')
'''
# Apply the first-level gain and offset corrections
while i < len(data.field('PH_COM')):
	rawx = data.field('RAWX')[i]
	rawy = data.field('RAWY')[i]
	temp = data.field('PH_COM')[i].reshape(3,3)
	if np.sum(temp) > 0:
		mask = (temp > 0).astype(int)
		channel = np.sum(np.add(np.multiply(np.multiply(mask, temp), gain[rawx:rawx + 3, rawy:rawy + 3]), np.multiply(mask, offset[rawx:rawx + 3, rawy:rawy + 3])))
		if (not np.isnan(channel)):
			events['RAWX'].append(rawx)
			events['RAWY'].append(rawy)
			events['TIME'].append(data.field('TIME')[i])
			events['CHANNEL'].append(channel)
			events['GRADE'].append(data.field('GRADE')[i])
			events['STIM'].append(data.field('STIM')[i])
			events['PH_COM'].append(temp)
	i += 1


spectrum = np.histogram(events['CHANNEL'], bins=int(np.ceil(np.max(events['CHANNEL']))))
plt.figure()
plt.plot(range(len(spectrum[0])), spectrum[0])
plt.show()
plt.close()'''

